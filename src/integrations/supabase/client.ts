
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://udiukyasxnfhemmamkbj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVkaXVreWFzeG5maGVtbWFta2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQxOTE3MjMsImV4cCI6MjA1OTc2NzcyM30.3fph3ltzA_6SfvD6ECLPMBCK03Sf0HHozx_BMPVmNQE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

// Types for our AI prediction related tables
export interface AIPredictionMetrics {
  id: string;
  no_show_accuracy: number;
  duration_accuracy: number;
  reschedule_acceptance: number;
  created_at: string | null;
  updated_at: string | null;
}

export interface AIPrediction {
  id: string;
  type: string;
  prediction: string;
  accuracy: number;
  timestamp: string | null;
  created_at: string | null;
  updated_at: string | null;
}

// Helper function for AI prediction metrics table - optimized to avoid multiple queries
export const getAIPredictionMetrics = async (): Promise<AIPredictionMetrics | null> => {
  try {
    const { data, error } = await supabase
      .from('ai_prediction_metrics')
      .select('*')
      .single();
    
    if (error) {
      console.error('Error fetching AI metrics:', error);
      return null;
    }
    
    return data as unknown as AIPredictionMetrics;
  } catch (err) {
    console.error('Unexpected error fetching AI metrics:', err);
    // Return demo data as fallback
    return {
      id: 'demo',
      no_show_accuracy: 87,
      duration_accuracy: 92,
      reschedule_acceptance: 79,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  }
};

// Helper function for AI predictions table - optimized with error handling
export const getAIPredictions = async (limit = 10): Promise<AIPrediction[]> => {
  try {
    const { data, error } = await supabase
      .from('ai_predictions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(limit);
    
    if (error) {
      console.error('Error fetching AI predictions:', error);
      return getDemoPredictions();
    }
    
    return (data?.length ? data : getDemoPredictions()) as AIPrediction[];
  } catch (err) {
    console.error('Unexpected error fetching AI predictions:', err);
    return getDemoPredictions();
  }
};

// Function to get demo predictions when the real data isn't available
const getDemoPredictions = (): AIPrediction[] => {
  return [
    { 
      id: '1', 
      type: 'No-Show', 
      prediction: 'Low Risk (15%)', 
      accuracy: 100, 
      timestamp: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    { 
      id: '2', 
      type: 'Duration', 
      prediction: '45 minutes', 
      accuracy: 78, 
      timestamp: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    { 
      id: '3', 
      type: 'Reschedule', 
      prediction: 'Suggested 3 slots', 
      accuracy: 90, 
      timestamp: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
  ];
};
